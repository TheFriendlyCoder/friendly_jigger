version: 2.1

commands:
  build_cmd:
    steps:
      - run:
          name: Build
          command: |
            export PROJ_VER=`cat version.txt`
            echo "Project version is $PROJ_VER"

            dotnet publish -c Release -r win10-x64 /p:Version=$PROJ_VER friendly_jigger
            dotnet publish -c Release -r linux-x64 /p:Version=$PROJ_VER friendly_jigger
            dotnet publish -c Release -r osx-x64 /p:Version=$PROJ_VER friendly_jigger

            mkdir binaries
            mv "./friendly_jigger/bin/Release/net5.0/win10-x64/publish/friendly_jigger.exe" "./binaries/friendly_jigger_windows.exe"
            mv "./friendly_jigger/bin/Release/net5.0/linux-x64/publish/friendly_jigger" "./binaries/friendly_jigger_linux"
            mv "./friendly_jigger/bin/Release/net5.0/osx-x64/publish/friendly_jigger" "./binaries/friendly_jigger_macos"
            

      - store_artifacts:
          path: ./binaries
      - persist_to_workspace:
          root: ./
          paths:
            - ./binaries/*
            - version.txt

  test_cmd:
    steps:
      - checkout
      - run: 
          name: Tests 
          command: |
            dotnet test --logger "trx;LogFileName=loggerFile.trx" ./tests/tests.csproj /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:Threshold=90
            dotnet tool install trx2junit
            dotnet tool run trx2junit tests/TestResults/*.trx
      - store_test_results:
          path: tests/TestResults
      - persist_to_workspace:
          root: ./tests/coverage
          paths:
            - coverage.opencover.xml

  publish_cmd:
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Publish
          command: |
            export COMMIT_MESSAGE=`git log --format=%B -n 1 $CIRCLE_SHA1`
            echo "COMMIT_MESSAGE env var is $COMMIT_MESSAGE"
            dotnet tool install --add-source "https://ci.appveyor.com/nuget/coveralls-net-t37a9a9unhwk" coveralls.net
            dotnet tool run csmacnz.Coveralls --opencover -i "./artifacts/coverage.opencover.xml" --useRelativePaths --commitId "$CIRCLE_SHA1" --commitBranch "$CIRCLE_BRANCH" --commitAuthor "$CIRCLE_USERNAME" --jobId "$CIRCLE_BUILD_NUM" --serviceName circleci --commitMessage "$COMMIT_MESSAGE"
            apt update
            # install missing dependencies
            apt install -y jq
            curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz --output ghr.tar.gz
            tar --no-same-owner -xzf ghr.tar.gz
            curl -L https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz --output hub.tgz
            tar --no-same-owner -xzf hub.tgz
            export PATH=$PATH:`echo ./hub-linux**/bin`
            ./clean_drafts.sh

jobs:
  build_prerelease:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - checkout
      - run:
          command: |
            export PROJ_VER=0.0.1.$CIRCLE_BUILD_NUM-dev
            echo $PROJ_VER > version.txt
      - build_cmd

  build_release:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - checkout
      - run:
          command: |
            echo $CIRCLE_TAG > version.txt
      - build_cmd
  
  test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - test_cmd

  publish_fork:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - publish_cmd
      - run:
          command: |
            export PROJ_VER=`cat ./artifacts/version.txt`
            echo "Project version in $PROJ_VER"
            ./ghr_**/ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_BRANCH} -recreate -draft $PROJ_VER "./artifacts/binaries"

  publish_prerelease:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - publish_cmd
      - run:
          command: |
            export PROJ_VER=0.0.1-dev
            ./ghr_**/ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -recreate -prerelease $PROJ_VER "./artifacts/binaries"

  publish_release:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - publish_cmd
      - run:
          command: |
            export PROJ_VER=`cat ./artifacts/version.txt`
            echo "Project version in $PROJ_VER"
            ./ghr_**/ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} $PROJ_VER "./artifacts/binaries"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_prerelease:
          filters:
            tags:
              ignore: /.*/
      - build_release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
              
      - test:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
              
      - publish_fork:
          filters:
            branches:
              ignore: 
                - master
            tags:
              ignore: /.*/
          requires:
            - build_prerelease
            - test
      - publish_prerelease:
          filters:
            branches:
              only:
                - master
            tags:
              ignore: /.*/
          requires:
            - build_prerelease
            - test
      - publish_release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
          requires:
            - build_prerelease
            - test

# TODO: Test PR integration with GHE
# TODO: consider consolidating all build jobs into 1 to improve build performance            
# TODO: consider loading version number from project and using for prereleases
#       then using the -recreate flag to overwrite tag for prerelease (ie: 0.0.1-dev)
